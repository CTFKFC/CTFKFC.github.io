[{"title":"Hello World","date":"2025-08-20T12:32:52.610Z","url":"/2025/08/20/hello-world/","categories":[["undefined",""]],"content":"本文系统自带，懒的删了www Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"喵喵喵，第一篇哦","date":"2025-08-20T00:18:56.000Z","url":"/2025/08/20/%E5%96%B5%E5%96%B5%E5%96%B5%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AF%87%E5%93%A6/","tags":[["日常","/tags/%E6%97%A5%E5%B8%B8/"],["介绍","/tags/%E4%BB%8B%E7%BB%8D/"]],"categories":[["undefined",""]],"content":"本文创建于 2025年8月20日 08∶18∶56，正式写于 2025年8月20日 20∶23 部署到github应该是2025年8月21日 大家好啊，本人2010年出生，现在是2025年，开学是高一 我将在本博客进行一些日常分享和学习笔记等东西 谢谢大家 至此 再见"},{"date":"2025-08-20T11:21:06.497Z","url":"/effects/cursor-effects.js","categories":[["undefined",""]],"content":"class Circle { constructor({ origin, speed, color, angle, context }) { this.origin = origin this.position = { ...this.origin } this.color = color this.speed = speed this.angle = angle this.context = context this.renderCount = 0 } draw() { this.context.fillStyle = this.color this.context.beginPath() this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2) this.context.fill() } move() { this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3) this.renderCount++ } } class Boom { constructor ({ origin, context, circleCount = 10, area }) { this.origin = origin this.context = context this.circleCount = circleCount this.area = area this.stop = false this.circles = [] } randomArray(range) { const length = range.length const randomIndex = Math.floor(length * Math.random()) return range[randomIndex] } randomColor() { const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) } randomRange(start, end) { return (end - start) * Math.random() + start } init() { for(let i = 0; i < this.circleCount; i++) { const circle = new Circle({ context: this.context, origin: this.origin, color: this.randomColor(), angle: this.randomRange(Math.PI - 1, Math.PI + 1), speed: this.randomRange(1, 6) }) this.circles.push(circle) } } move() { this.circles.forEach((circle, index) => { if (circle.position.x > this.area.width || circle.position.y > this.area.height) { return this.circles.splice(index, 1) } circle.move() }) if (this.circles.length == 0) { this.stop = true } } draw() { this.circles.forEach(circle => circle.draw()) } } class CursorSpecialEffects { constructor() { this.computerCanvas = document.createElement('canvas') this.renderCanvas = document.createElement('canvas') this.computerContext = this.computerCanvas.getContext('2d') this.renderContext = this.renderCanvas.getContext('2d') this.globalWidth = window.innerWidth this.globalHeight = window.innerHeight this.booms = [] this.running = false } handleMouseDown(e) { const boom = new Boom({ origin: { x: e.clientX, y: e.clientY }, context: this.computerContext, area: { width: this.globalWidth, height: this.globalHeight } }) boom.init() this.booms.push(boom) this.running || this.run() } handlePageHide() { this.booms = [] this.running = false } init() { const style = this.renderCanvas.style style.position = 'fixed' style.top = style.left = 0 style.zIndex = '999999999999999999999999999999999999999999' style.pointerEvents = 'none' style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight document.body.append(this.renderCanvas) window.addEventListener('mousedown', this.handleMouseDown.bind(this)) window.addEventListener('pagehide', this.handlePageHide.bind(this)) } run() { this.running = true if (this.booms.length == 0) { return this.running = false } requestAnimationFrame(this.run.bind(this)) this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.booms.forEach((boom, index) => { if (boom.stop) { return this.booms.splice(index, 1) } boom.move() boom.draw() }) this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight) } } const cursorSpecialEffects = new CursorSpecialEffects() cursorSpecialEffects.init()"},{"date":"2025-08-20T11:14:15.860Z","url":"/effects/leave-event.js","categories":[["undefined",""]],"content":"(() => { // 配置部分 const leaveDelay = 30; // 触发事件的延迟，单位为秒 const leaveFavicon = null; // 触发事件后的图标路径，设置为 null 表示不替换图标 const leaveTitle = \"{{{(>_"},{"date":"2025-08-20T11:22:31.632Z","url":"/effects/snow.css","categories":[["undefined",""]],"content":"#snow { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 99999; pointer-events: none; background: rgba(225, 225, 225, .05); }"},{"date":"2025-08-20T11:22:53.260Z","url":"/effects/snow.js","categories":[["undefined",""]],"content":"(()=>{ // 设置雪花参数 const snowConf = { flakeCount: 100, minDist: 150, color: \"255, 255, 255\", size: 2, speed: 0.5, opacity: 0.3, stepsize: .5, }; // 记录下雪状态 let isSnowing = true; const requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function(callback){window.setTimeout(callback, 1000/60);}; window.requestAnimationFrame = requestAnimationFrame; const canvas = document.getElementById(\"snow\"); const ctx = canvas.getContext(\"2d\"); const flakeCount = snowConf.flakeCount; let mX = -100, mY = -100; let flakes = []; canvas.width = window.innerWidth; canvas.height = window.innerHeight; const snow = () => { if (!isSnowing) { return; // 结束 } // 清空画布 ctx.clearRect(0, 0, canvas.width, canvas.height); const minDist = snowConf.minDist; for (let i = 0; i < flakeCount; i++){ let flake = flakes[i]; const x = mX, y = mY; const x2 = flake.x, y2 = flake.y; const dist = Math.sqrt((x - x2)*(x - x2) + (y - y2)*(y - y2)); if (dist < minDist) { const force = minDist / (dist*dist); const xcomp = (x - x2) / dist; const ycomp = (y - y2) / dist; const deltaV = force / 2; flake.velX -= deltaV * xcomp; flake.velY -= deltaV * ycomp; } else { flake.velX *= 0.98; if (flake.velY < flake.speed && (flake.speed - flake.velY > .01)) { flake.velY += (flake.speed - flake.velY) * .01; } flake.velX += Math.cos(flake.step += .05) * flake.stepSize; } ctx.fillStyle = \"rgba(\" + snowConf.color + \", \" + flake.opacity + \")\"; flake.y += flake.velY; flake.x += flake.velX; if(flake.y >= canvas.height || flake.y = canvas.width || flake.x { flake.x = Math.floor(Math.random()*canvas.width); flake.y = 0; flake.size = (Math.random()*3)+2; flake.speed = (Math.random()*1)+0.5; flake.velY = flake.speed; flake.velX = 0; flake.opacity = (Math.random()*0.5)+0.3; }; const startSnow = () => { // 生成初始雪花 for (let i = 0; i < flakeCount; i++) { const x = Math.floor(Math.random()*canvas.width); const y = Math.floor(Math.random()*canvas.height); const size = (Math.random()*3) + snowConf.size; const speed = (Math.random()*1) + snowConf.speed; const opacity = (Math.random()*0.5) + snowConf.opacity; flakes.push({ speed: speed, velX: 0, velY: speed, x: x, y: y, size: size, stepSize: (Math.random()) / 30 * snowConf.stepsize, step: 0, angle: 180, opacity: opacity }); } // 开始下雪 snow(); }; // 雪花避让鼠标 document.addEventListener(\"mousemove\", (e)=>{mX = e.clientX, mY = e.clientY}); // 窗口大小调整 window.addEventListener(\"resize\",()=>{canvas.width = window.innerWidth; canvas.height = window.innerHeight;}); // 初始化 startSnow(); })();"},{"date":"2025-08-20T11:38:52.500Z","url":"/others/mermaid.js","categories":[["undefined",""]],"content":"(() => { // 初始化函数 const init = () => { if (typeof mermaid === \"undefined\") { // 重试 setTimeout(init, 200); } else { // 开始初始化 mermaid.initialize({ theme: \"dark\", // 这里可以根据自己的需要调整成自己想要的主题 }); } }; // 页面更新时的重载函数 const reload = () => { mermaid.init(undefined, \".mermaid\"); }; // 加载时初始化一次 init(); // 在 PJAX 之后重载 window.addEventListener('pjax:complete', reload); })();"},{"date":"2025-08-20T11:17:25.895Z","url":"/others/mobile-hero.css","categories":[["undefined",""]],"content":"@media (max-width: 768px) { .kratos-start { height: unset !important; } .kratos-cover.kratos-cover-2.text-center { display: block; } }"},{"date":"2025-08-20T11:19:47.738Z","url":"/others/random-post-cover.js","categories":[["undefined",""]],"content":"(() => { // 请设置为您在配置中配置的默认封面路径 const defaultCoverSrc = \"/images/default.webp\"; // 请设置为您的随机文件基础路径（{no} 替代编号，从 1 开始） const randomImageSrcTemplate = \"{no}.webp\"; // 请设置为您的随机图片文件数量 const randomImageCount = 20; // 初始化暂存目录，使用减员随机来减少连续重复可能导致的糟糕体验 const usedImages = new Array(randomImageCount); // 初始化随机函数 const generateNewCoverID = () => { let remailFailCounts = 2; // 设置最大随机失败介入次数 let imageNo; while (remailFailCounts > 0) { // 随机挑选一个 imageNo = Math.floor(Math.random() * randomImageCount); if (!usedImages[imageNo]) { // 有效 break; } else { // 无效，重试 remailFailCounts--; } } if (remailFailCounts "},{"date":"2025-08-20T11:35:31.226Z","url":"/widgets/aplayer.css","categories":[["undefined",""]],"content":"#footer { padding-bottom: 32px; }"},{"date":"2025-08-25T08:53:43.112Z","url":"/widgets/aplayer.js","categories":[["undefined",""]],"content":"const ap = new APlayer({ container: document.getElementById('aplayer'), fixed: true, audio: [ { name: '怎叹', url: '/music/song1.mp3' }, { name: '唐人恋曲', url: '/music/jwtsgp.mp3' } ] });"}]